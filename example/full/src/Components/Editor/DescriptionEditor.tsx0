import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { SliderPicker, CirclePicker } from 'react-color';
import { Editor, EditorState, RichUtils, Entity, Modifier, SelectionState, CompositeDecorator, AtomicBlockUtils, getVisibleSelectionRect, ContentState, convertFromRaw, convertToRaw, RawDraftContentState } from 'draft-js';

import { Modal } from '../Modal';
import { ProveModal } from '../Modal';
import { Popup } from '../Popup';
import { Icon } from '../Icon';
import { Clickable } from '../Clickable';
import { Button } from '../Button';
import { Img } from '../Img';
import { Input } from '../Input';

function getSelectedBlocks(contentState: ContentState, anchorKey: string, focusKey: string) {
  const isSameBlock = anchorKey === focusKey
  const startingBlock = contentState.getBlockForKey(anchorKey)
  const selectedBlocks = [startingBlock]

  if (!isSameBlock) {
    let blockKey = anchorKey
    while (blockKey !== focusKey) {
      const nextBlock = contentState.getBlockAfter(blockKey)
      selectedBlocks.push(nextBlock)
      blockKey = nextBlock.getKey()
    }
  }

  return selectedBlocks
}

function selectionContainsEntity(strategy, editorState: EditorState, contentState: ContentState, decoratorKey: string, decoratorStart: number, decoratorLength: number): boolean {
  contentState = contentState || editorState.getCurrentContent()
  const currentSelection = editorState.getSelection()
  const startKey = currentSelection.getStartKey()
  const endKey = currentSelection.getEndKey()
  const startOffset = currentSelection.getStartOffset()
  const endOffset = currentSelection.getEndOffset()
  const isSameBlock = startKey === endKey
  const selectedBlocks = getSelectedBlocks(contentState, startKey, endKey)

  let entityFound = false

  selectedBlocks.forEach(block => {
    strategy(block, (start, end) => {
      if (entityFound) return
      const blockKey = block.getKey()

      if (isSameBlock && (end < startOffset || start > endOffset)) return
      else if (startOffset !== endOffset) return
      else if (startKey !== endKey) return
      else if (blockKey !== startKey) return
      else if (blockKey !== decoratorKey) return
      else if (startOffset < decoratorStart || startOffset > decoratorStart + decoratorLength) return
      // else if (blockKey === startKey && end < startOffset) return
      // else if (blockKey === endKey && start > endOffset) return
      // let entity = block.entries().next().value

      entityFound = true
    })
  })

  return entityFound
}

function blockRenderer(block) {
  if (block.getType() === 'atomic') {
    return {
      component: Media,
      editable: false,
    };
  }

  return null;
}

const Audio = (props) => {
  return <audio controls src={props.src} style={{
    width: '100%'
  }} />;
};

const Image = (props) => {
  return <img src={props.src} style={{
    width: '100%'
  }} />;
};

const Video = (props) => {
  return <video controls src={props.src} style={{
    width: '100%'
  }} />;
};

const UserBlock = (props) => {
  const entity = props.contentState.getEntity(
    props.block.getEntityAt(0)
  );

  const { avatar, username } = entity.getData();

  return (
    <span className="tag" style={{
      color: '#3b5998',
      textDecoration: 'underline',
    }}>
      <img className="tag-img" src={avatar}/>
      <span>{username}{props.children}</span>
    </span>
  );
};

const Media = (props) => {
  const entity = props.contentState.getEntity(
    props.block.getEntityAt(0)
  );

  const {
    src
  } = entity.getData();
  const type = entity.getType();

  let media;

  if (type === 'audio') {
    media = <Audio src={src} />;
  } else if (type === 'image') {
    media = <Image src={src} />;
  } else if (type === 'video') {
    media = <Video src={src} />;
  } else if (type === 'user') {
    media = UserBlock(props);
  } else {
    media = <Image src={src} />;
  }
  return media;
};

/**
 * Super simple decorators for handles and hashtags, for demonstration
 * purposes only. Don't reuse these regexes.
 */
const HANDLE_REGEX = /\@[\w]+/g;
const HASHTAG_REGEX = /\#[\w\u0590-\u05ff]+/g;

function findWithRegex(regex, contentBlock, callback) {
  const text = contentBlock && contentBlock.getText();
  let matchArr, start;
  while ((matchArr = regex.exec(text)) !== null) {
    start = matchArr.index;
    callback(start, start + matchArr[0].length);
  }
}

function handleStrategy(contentBlock, callback, contentState) {
  findWithRegex(HANDLE_REGEX, contentBlock, callback);
}

function hashtagStrategy(contentBlock, callback, contentState) {
  findWithRegex(HASHTAG_REGEX, contentBlock, callback);
}

const HandleSpan = class extends React.Component<{
  offsetKey: any
  contentState: ContentState
  decoratedText: string
  entityKey: string
  editor: DescriptionEditor
}, {}> {

  sub = () => {
    this.forceUpdate();
  }

  componentDidMount() {
    this.props.editor.subscribe(this.sub);
  }

  componentWillUnmount() {
    this.props.editor.unsubscribe(this.sub);
  }

  replaceTest() {
    const { decoratedText, children, offsetKey, entityKey, editor } = this.props;
    const { start, block: { key } } = children['0'].props;
    const editorState = this.props.editor.state.editorState;

    const selectionState = new SelectionState({
      anchorOffset: start,
      focusOffset: start + decoratedText.length,
      anchorKey: key,
      focusKey: key,
    });

    let newState = Modifier.replaceText(
      editorState.getCurrentContent(),
      selectionState,
      "my new text",
      null,
      entityKey,
    );

    this.props.editor.setState({editorState: EditorState.push(editorState, newState, 'insert-fragment')});
  }

  replaceEntityBlock() {
    const { decoratedText, children, offsetKey, entityKey, editor } = this.props;
    const { start, block: { key } } = children['0'].props;
    const editorState = this.props.editor.state.editorState;
    const contentState = editorState.getCurrentContent();

    const selectionState = new SelectionState({
      anchorOffset: start,
      focusOffset: start + decoratedText.length,
      anchorKey: key,
      focusKey: key,
    });

    var newSelection = new SelectionState({
      anchorOffset: start,
      focusOffset: start,
      anchorKey: key,
      focusKey: key,
    });

    const newContent = Modifier.removeRange(contentState, selectionState, 'backward');
    const newEditorState = EditorState.push(editorState, newContent, 'insert-characters');

    const finalContent = newContent.createEntity(
      'user',
      'IMMUTABLE',
      {
        id: 1,
        username: 'makame',
        avatar: '/images/avatar-empty.png'
      }
    );

    const entityKeyNew = finalContent.getLastCreatedEntityKey();
    const finalEditorState = EditorState.set(
      newEditorState,
      { currentContent: finalContent }
    );

    // const entityKeyNew = contentStateWithEntity.getLastCreatedEntityKey();
    // const newEditorState = EditorState.set(editorState, { currentContent: contentStateWithEntity });

    // let newState = Modifier.applyEntity(
    //   contentStateWithEntity,
    //   selectionState,
    //   entityKey
    // );

    // this.props.editor.setState({editorState: EditorState.push(editorState, newState, 'insert-fragment')});

    this.props.editor.setState({editorState: AtomicBlockUtils.insertAtomicBlock(
      finalEditorState,
      entityKeyNew,
      ' '
    )});
  }

  replaceEntity() {
    const { decoratedText, children, offsetKey, entityKey, editor } = this.props;
    const { start, block: { key } } = children['0'].props;
    const editorState = this.props.editor.state.editorState;
    const contentState = editorState.getCurrentContent();

    const selectionState = new SelectionState({
      anchorOffset: start,
      focusOffset: start + decoratedText.length,
      anchorKey: key,
      focusKey: key,
    });

    const newContent = contentState.createEntity(
      'USER',
      'IMMUTABLE',
      {
        id: 1,
        username: 'makame',
        avatar: '/images/avatar-empty.png'
      }
    );

    const entityKeyNew = newContent.getLastCreatedEntityKey();
    const newEditorState = EditorState.set(
      editorState,
      { currentContent: newContent }
    );

    let newState = Modifier.replaceText(
      newEditorState.getCurrentContent(),
      selectionState,
      'makame',
      null,
      entityKeyNew,
    );

    this.props.editor.setState({editorState: EditorState.push(newEditorState, newState, 'insert-fragment')});
  }

  render() {
    const { start, block: { key }, text: { length } } = this.props.children['0'].props;

    let isSelected = selectionContainsEntity(handleStrategy, this.props.editor.state.editorState, this.props.contentState, key, start, length);

    return (
      <Popup isOpened={isSelected} data-offset-key={this.props.offsetKey} type="select" position="bottom center" openOnClick closeOnEsc closeOnOutsideClick element={
        <span
          style={{
            color: 'rgba(98, 177, 254, 1.0)',
            direction: 'ltr',
            unicodeBidi: 'bidi-override',
          }} spellCheck={false}>
          {this.props.children}
        </span>}>
        <Clickable className="item" onClick={async e => this.replaceEntity()}>Replace Entity</Clickable>
        <Clickable className="item" onClick={async e => this.replaceTest()}>Replace Test</Clickable>
      </Popup>
    );
  }
};

const HashtagSpan = (props) => {
  return (
    <span
      style={{
        color: 'rgba(95, 184, 138, 1.0)',
      }}
      data-offset-key={props.offsetKey}
    >
      {props.children}
    </span>
  );
};

function findLinkEntities(contentBlock, callback, contentState) {
  contentBlock.findEntityRanges(
    character => {
      const entityKey = character.getEntity();
      return (
        entityKey !== null &&
        contentState.getEntity(entityKey).getType() === 'LINK'
      );
    },
    callback
  );
}

const Link = (props) => {
  const { url } = props.contentState.getEntity(props.entityKey).getData();

  return (
    <a href={url} style={{
      color: '#3b5998',
      textDecoration: 'underline',
    }}>
      {props.children}
    </a>
  );
};

function findUserEntities(contentBlock, callback, contentState) {
  contentBlock.findEntityRanges(
    character => {
      const entityKey = character.getEntity();
      return (
        entityKey !== null &&
        contentState.getEntity(entityKey).getType() === 'USER'
      );
    },
    callback
  );
}

const User = (props) => {
  const entity = props.contentState.getEntity(props.entityKey);

  const { avatar, username } = entity.getData();

  const drop = (x)=>{
  }

  const start = (e)=>{
    e.dataTransfer.dropEffect = 'move';
    // e.dataTransfer.setData("text", props.block.key);
  }

  return (
    <span draggable onDragStart={start} onDrop={drop} onDragEnd={drop} className="tag" style={{
      color: '#3b5998',
      textDecoration: 'underline',
    }} data-offset-key={props.offsetKey} spellCheck={false} contentEditable={false}>
      <img className="tag-img" src={avatar}/>
      {username}
    </span>
  );
};

// const styles = {
//   immutable: {
//     backgroundColor: 'rgba(0, 0, 0, 0.2)',
//     padding: '2px 0',
//   },
//   mutable: {
//     backgroundColor: 'rgba(204, 204, 255, 1.0)',
//     padding: '2px 0',
//   },
//   segmented: {
//     backgroundColor: 'rgba(248, 222, 126, 1.0)',
//     padding: '2px 0',
//   },
// };

// function getEntityStrategy(mutability) {
//   return function(contentBlock, callback, contentState) {
//     contentBlock.findEntityRanges(
//       (character) => {
//         const entityKey = character.getEntity();
//         if (entityKey === null) {
//           return false;
//         }
//         return contentState.getEntity(entityKey).getMutability() === mutability;
//       },
//       callback
//     );
//   };
// }

// function getDecoratedStyle(mutability) {
//   switch (mutability) {
//     case 'IMMUTABLE': return styles.immutable;
//     case 'MUTABLE': return styles.mutable;
//     case 'SEGMENTED': return styles.segmented;
//     default: return null;
//   }
// }

// const TokenSpan = (props) => {
//   const style = getDecoratedStyle(
//     props.contentState.getEntity(props.entityKey).getMutability()
//   );

//   return (
//     <span data-offset-key={props.offsetkey} style={style}>
//       {props.children}
//     </span>
//   );
// };

export class DescriptionEditor extends React.Component<{
  className?: string
  placeholder?: string
  raw?: RawDraftContentState
  onChange?: (raw: RawDraftContentState, data: {
    users: any[]
    tags: any[]
  }) => void
  readOnly?: boolean
}, {
  fileUrl: string
  fileType: 'audio' | 'image' | 'video' | 'twitter'
  link: string
  editorState: EditorState
}> {
  constructor(props, context) {
    super(props, context);

    this.compositeDecorator = new CompositeDecorator([
      {
        strategy: handleStrategy,
        component: HandleSpan,
        props: {
          editor: this
        }
      },
      {
        strategy: hashtagStrategy,
        component: HashtagSpan,
        props: {
          editor: this
        }
      },
      // {
      //   strategy: getEntityStrategy('IMMUTABLE'),
      //   component: TokenSpan,
      // },
      // {
      //   strategy: getEntityStrategy('MUTABLE'),
      //   component: TokenSpan,
      // },
      // {
      //   strategy: getEntityStrategy('SEGMENTED'),
      //   component: TokenSpan,
      // },
      {
        strategy: findUserEntities,
        component: User,
      },
      {
        strategy: findLinkEntities,
        component: Link,
      },
    ]);

    if (props.raw) {
      this.state = {
        fileUrl: '',
        fileType: undefined,
        link: '',
        editorState: EditorState.createWithContent(convertFromRaw(props.raw), this.compositeDecorator),
      };
    } else {
      this.state = {
        fileUrl: '',
        fileType: undefined,
        link: '',
        editorState: EditorState.createEmpty(this.compositeDecorator),
      };
    }
  }

  compositeDecorator: CompositeDecorator
  currentNode: JQuery = null
  toolbarNodeHeight: number = 0
  focused: boolean
  refs: any

  promptForMedia(type) {
    const {
      editorState
    } = this.state;

    this.setState({
      fileUrl: '',
      fileType: type,
    }, () => {
      // setTimeout(() => this.refs.url.focus(), 0);
    });
  }

  subscribers: Function[] = []

  subscribe(cb) {
    this.subscribers.push(cb);
  }

  unsubscribe(cb) {
    this.subscribers.splice(this.subscribers.indexOf(cb), 1);
  }

  public getJSON() {
    return convertToRaw(this.state.editorState.getCurrentContent());
  }

  public setNull() {
    this.setState({ editorState: EditorState.createEmpty(this.compositeDecorator) });
  }

  public setJSON(data: RawDraftContentState) {
    let contentState = convertFromRaw(data);
    this.setState({ editorState: EditorState.createWithContent(contentState, this.compositeDecorator) });
  }

  private onChange(editorState: EditorState) {
    const raw = convertToRaw(editorState.getCurrentContent());

    const tags = raw.blocks.reduce((prev, block, index) => {
      let matchArr;
      while ((matchArr = HASHTAG_REGEX.exec(block.text)) !== null) {
        let tag = matchArr[0];
        if (prev.indexOf(tag) < 0) prev.push(tag);
      }
      return prev;
    }, []);

    const users = Object.keys(raw.entityMap).reduce((prev, key, index) => {
      let userId = raw.entityMap[key].data.id;
      if (prev.indexOf(userId) < 0) prev.push(userId);
      return prev;
    }, []);

    this.setState({ editorState }, () => {
      this.subscribers.forEach(cb => cb());
    });
    setImmediate(this.updateToolbar.bind(this));

    if (this.props.onChange) {
      this.props.onChange(raw, {
        tags,
        users
      })
    }
  }

  blockStyle(contentBlock) {
    switch (contentBlock.getType()) {
      case 'blockquote':
        return 'blockquote';
      case 'alignleft':
        return 'im-left';
      case 'aligncenter':
        return 'im-center';
      case 'alignright':
        return 'im-right';
      default:
        return null;
    }
  }

  focus(e?) {
    (this.refs.editor as Editor).focus();

    // const currentContent = this.state.editorState.getCurrentContent();
    // const selection = this.state.editorState.getSelection();
    // const currentBlock = currentContent.getBlockForKey(selection.getStartKey());

    this.updateToolbar();
  }

  getSelectedElement() {
    const currentContent = this.state.editorState.getCurrentContent();
    const selection = this.state.editorState.getSelection();
    const currentBlock = currentContent.getBlockForKey(selection.getStartKey());
    const element = currentContent.get
    return selection;
  }

  getSelectedBlockElement() {
    var selection = window.getSelection()
    if (selection.rangeCount == 0) return null
    var node = selection.getRangeAt(0).startContainer
    do {
      if (node.attributes && node.attributes.getNamedItem('data-block') && node.attributes.getNamedItem('data-block').value == 'true')
        return node
      node = node.parentNode
    } while (node != null)
    return null
  }

  updateToolbar(update: boolean = true) {
    if (this.focused) {
      let elem = this.getSelectedBlockElement();
      let toolbar = ReactDOM.findDOMNode(this.refs.toolbar);
      this.currentNode = elem ? $(elem) : this.currentNode;
      this.toolbarNodeHeight = toolbar ? $(toolbar).outerHeight() : this.toolbarNodeHeight;
    }

    if (update) this.forceUpdate();
  }

  onTab(e: React.KeyboardEvent<{}>) {
    e.preventDefault();
    // e.stopPropagation();

    const maxDepth = 4;
    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));
  }

  confirmMedia() {
    // e.preventDefault();

    const {
      editorState,
      fileUrl,
      fileType
    } = this.state;

    const contentState = editorState.getCurrentContent();
    const contentStateWithEntity = contentState.createEntity(
      fileType,
      'IMMUTABLE',
      {
        src: fileUrl
      }
    );

    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();
    const newEditorState = EditorState.set(
      editorState,
      { currentContent: contentStateWithEntity }
    );

    this.setState({
      editorState: AtomicBlockUtils.insertAtomicBlock(
        newEditorState,
        entityKey,
        ' '
      ),
      fileUrl: '',
      fileType: undefined,
    }, () => {
      // setTimeout(() => this.focus(), 0);
    });
  }

  confirmLink() {
    // e.preventDefault();

    const {
      editorState,
      link
    } = this.state;

    const contentState = editorState.getCurrentContent();
    const contentStateWithEntity = contentState.createEntity(
      'LINK',
      'MUTABLE',
      {url: link}
    );

    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();
    const newEditorState = EditorState.set(editorState, { currentContent: contentStateWithEntity });

    this.setState({
      editorState: RichUtils.toggleLink(
        newEditorState,
        newEditorState.getSelection(),
        entityKey
      ),
      link: '',
    }, () => {
      setTimeout(() => this.focus(), 0);
    });
  }

  removeLink(e) {
    // e.preventDefault();

    const {
      editorState
    } = this.state;

    const selection = editorState.getSelection();

    if (!selection.isCollapsed()) {
      this.setState({
        editorState: RichUtils.toggleLink(editorState, selection, null),
      }, () => {
        setTimeout(() => this.focus(), 0);
      });
    }
  }

  promptForLink() {
    const {
      editorState
    } = this.state;

    const selection = editorState.getSelection();

    if (!selection.isCollapsed()) {
      const contentState = editorState.getCurrentContent();
      const startKey = editorState.getSelection().getStartKey();
      const startOffset = editorState.getSelection().getStartOffset();
      const blockWithLinkAtBeginning = contentState.getBlockForKey(startKey);
      const linkKey = blockWithLinkAtBeginning.getEntityAt(startOffset);

      let url = '';

      if (linkKey) {
        const linkInstance = contentState.getEntity(linkKey);
        url = linkInstance.getData().url;
      }

      this.setState({
        link: url,
      }, () => {
        // setTimeout(() => this.refs.url.focus(), 0);
      });
    }
  }

  drop(e) {
    var blockKey = e.dataTransfer.getData("text");
    // Set timeout to allow cursor/selection to move to drop location
    setTimeout(()=>{
      // Get content, selection, block
      var content = this.state.editorState.getCurrentContent();
      var selection = this.state.editorState.getSelection();
      var block = content.getBlockForKey(blockKey);

      // Split on drop location and set block type
      var afterSplit = Modifier.splitBlock(content, selection);
      var insertionTarget = afterSplit.getSelectionAfter();
      var afterInsert = Modifier.setBlockType(afterSplit, insertionTarget, block.getType());

      // Get block range and remove dragged block
      var targetRange = new SelectionState({
        anchorKey: blockKey,
        anchorOffset: 0,
        focusKey: blockKey,
        focusOffset: block.getLength(),
      });
      var afterRemoval = Modifier.removeRange(afterInsert, targetRange, 'backward');
      var resetBlock = Modifier.setBlockType(
        afterRemoval,
        afterRemoval.getSelectionAfter(),
        'unstyled'
      );
      var newState = EditorState.push(this.state.editorState, resetBlock, 'remove-range');
      this.setState({ editorState: EditorState.forceSelection(newState, resetBlock.getSelectionAfter()) });
    }, 1);
  }

  render() {
    return this.props.readOnly
    ? (
      <div className={"editor " + (this.props.className || '')}>
        <Editor blockRendererFn={blockRenderer} ref="editor" blockStyleFn={this.blockStyle} placeholder={this.props.placeholder} editorState={this.state.editorState} onChange={editorState => this.onChange(editorState)} readOnly={this.props.readOnly}/>
      </div>
    )
    : (
      <div className={"editor " + (this.props.className || '')}>
        <div style={{
          position: 'relative'
        }}>
          <div className="row around-xs">
            <div className="col-1">
              <Popup ref="toolbar" type="select" position="bottom left" openOnFocus openOnClick closeOnEsc closeOnOutsideClick element={
                <Button type="empty" size="xs" unactive style={{
                  position: 'absolute',
                  top: (this.currentNode && this.currentNode.length) && (this.currentNode.position().top + this.currentNode.outerHeight() / 2 - this.toolbarNodeHeight / 2),
                  left: 10,
                  display: (this.currentNode && this.currentNode.length) ? 'inline-block' : 'none'
                }}>
                  <div className="fa fa-bars m-0"></div>
                </Button>}>
                <div className="group row around-xs">
                  <div className="col-4">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'header-one'))}>H1</Clickable>
                  </div>
                  <div className="col-4">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'header-two'))}>H2</Clickable>
                  </div>
                  <div className="col-4">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'header-three'))}>H3</Clickable>
                  </div>
                </div>
                <div className="group row around-xs">
                  <div className="col-4">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'header-four'))}>H4</Clickable>
                  </div>
                  <div className="col-4">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'header-five'))}>H5</Clickable>
                  </div>
                  <div className="col-4">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'unstyled'))}><span className="fa fa-undo"/></Clickable>
                  </div>
                </div>
                <div className="group row around-xs">
                  <div className="col-4">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'alignleft'))}>Left</Clickable>
                  </div>
                  <div className="col-4">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'aligncenter'))}>Center</Clickable>
                  </div>
                  <div className="col-4">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'alignright'))}>Right</Clickable>
                  </div>
                </div>
                <div className="group row around-xs">
                  <div className="col-6">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'code-block'))}>Code</Clickable>
                  </div>
                  <div className="col-6">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'blockquote'))}>Quote</Clickable>
                  </div>
                </div>
                <div className="group row around-xs">
                  <div className="col-3">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'))}><span className="fa fa-bold"/></Clickable>
                  </div>
                  <div className="col-3">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'ITALIC'))}><span className="fa fa-italic"/></Clickable>
                  </div>
                  <div className="col-3">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'UNDERLINE'))}><span className="fa fa-underline"/></Clickable>
                  </div>
                  <div className="col-3">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'STRIKETHROUGH'))}><span className="fa fa-strikethrough"/></Clickable>
                  </div>
                </div>
                <div className="group row around-xs">
                  <div className="col-3">
                    <Modal size="small" level={-2} openOnClick closeOnEsc closeOnOutsideClick element={
                      <Clickable className="item" style={{textAlign: 'center'}}><span className="fa fa-link"/></Clickable>
                    }>
                      <ProveModal title="Link" type="empty" onProve={async () => this.confirmLink()}>
                        <Popup type="error" position="top center" openOnFocus openOnOverMove closeOnOutsideClick closeOnBlur closeOnOutMove closeOnOutMovePop timeout={300} isHidden element={
                          <Input size="md" type="text" placeholder="Link" icon="link" error={false} linkValue={{
                            set: (value) => {
                              this.setState({ link: value });
                            },
                            get: () => this.state.link
                          }}>
                          </Input>}>
                          It's not a link
                        </Popup>
                      </ProveModal>
                    </Modal>
                  </div>
                  <div className="col-3">
                    <Modal level={-2} openOnClick closeOnEsc closeOnOutsideClick element={
                      <Clickable className="item" style={{textAlign: 'center'}}><span className="fa fa-file"/></Clickable>
                    }>
                      <ProveModal title="Image / Twitter / Youtube" type="empty" onProve={async () => this.confirmMedia()}>
                        <Popup type="error" position="top center" openOnFocus openOnOverMove closeOnOutsideClick closeOnBlur closeOnOutMove closeOnOutMovePop timeout={300} isHidden element={
                          <Input size="md" type="text" placeholder="Link" icon="link" error={false} linkValue={{
                            set: (value) => {
                              this.setState({ fileUrl: value });
                            },
                            get: () => this.state.fileUrl
                          }}>
                          </Input>}>
                          It's not a link
                        </Popup>
                      </ProveModal>
                    </Modal>
                  </div>
                  <div className="col-3">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'ordered-list-item'))}><span className="fa fa-list-ol"/></Clickable>
                  </div>
                  <div className="col-3">
                    <Clickable className="item" style={{textAlign: 'center'}} onClick={async e => this.onChange(RichUtils.toggleBlockType(this.state.editorState, 'unordered-list-item'))}><span className="fa fa-list-ul"/></Clickable>
                  </div>
                </div>
              </Popup>
            </div>
            <div className="col-11" onClick={e => this.focus(e)} onDrop={this.drop.bind(this)}>
              <Editor blockRendererFn={blockRenderer} onFocus={e => this.focused = true} onBlur={e => this.focused = false} onTab={e => this.onTab(e)} onUpArrow={e => this.updateToolbar()} onDownArrow={e => this.updateToolbar()} ref="editor" blockStyleFn={this.blockStyle} placeholder={this.props.placeholder} editorState={this.state.editorState} onChange={editorState => this.onChange(editorState)} spellCheck/>
            </div>
          </div>
        </div>
      </div>
    );
  }
}