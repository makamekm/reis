$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

@mixin media-breakpoint-up($breakpoint) {
  @if $breakpoint == 0 {
    @content;
  } @else {
    @media (min-width: $breakpoint) {
      @content;
    }
  }
}

@mixin d-temp($name) {
  .d$(name)-none         { display: none !important; }
  .d$(name)-inline       { display: inline !important; }
  .d$(name)-inline-block { display: inline-block !important; }
  .d$(name)-block        { display: block !important; }
  .d$(name)-table        { display: table !important; }
  .d$(name)-table-row    { display: table-row !important; }
  .d$(name)-table-cell   { display: table-cell !important; }
  .d$(name)-flex         { display: flex !important; }
  .d$(name)-inline-flex  { display: inline-flex !important; }
}

@each $breakpoint $indent in $grid-breakpoints {
  @include media-breakpoint-up($breakpoint) {
    @if $breakpoint == 0 {
      @include d-temp();
    } @else {
      @include d-temp(-$indent);
    }
  }
}

@media print {
  @include d-temp(-print);
}

.mw-100 { max-width: 100% !important; }
.mh-100 { max-height: 100% !important; }

@mixin flex-temp($infix) {
  .flex$(infix)-row            { flex-direction: row !important; }
  .flex$(infix)-column         { flex-direction: column !important; }
  .flex$(infix)-row-reverse    { flex-direction: row-reverse !important; }
  .flex$(infix)-column-reverse { flex-direction: column-reverse !important; }

  .flex$(infix)-wrap         { flex-wrap: wrap !important; }
  .flex$(infix)-nowrap       { flex-wrap: nowrap !important; }
  .flex$(infix)-wrap-reverse { flex-wrap: wrap-reverse !important; }

  .justify-content$(infix)-start   { justify-content: flex-start !important; }
  .justify-content$(infix)-end     { justify-content: flex-end !important; }
  .justify-content$(infix)-center  { justify-content: center !important; }
  .justify-content$(infix)-between { justify-content: space-between !important; }
  .justify-content$(infix)-around  { justify-content: space-around !important; }

  .align-items$(infix)-start    { align-items: flex-start !important; }
  .align-items$(infix)-end      { align-items: flex-end !important; }
  .align-items$(infix)-center   { align-items: center !important; }
  .align-items$(infix)-baseline { align-items: baseline !important; }
  .align-items$(infix)-stretch  { align-items: stretch !important; }

  .align-content$(infix)-start   { align-content: flex-start !important; }
  .align-content$(infix)-end     { align-content: flex-end !important; }
  .align-content$(infix)-center  { align-content: center !important; }
  .align-content$(infix)-between { align-content: space-between !important; }
  .align-content$(infix)-around  { align-content: space-around !important; }
  .align-content$(infix)-stretch { align-content: stretch !important; }

  .align-self$(infix)-auto     { align-self: auto !important; }
  .align-self$(infix)-start    { align-self: flex-start !important; }
  .align-self$(infix)-end      { align-self: flex-end !important; }
  .align-self$(infix)-center   { align-self: center !important; }
  .align-self$(infix)-baseline { align-self: baseline !important; }
  .align-self$(infix)-stretch  { align-self: stretch !important; }
}

@each $breakpoint $indent in $grid-breakpoints {
  @include media-breakpoint-up($breakpoint) {
    @if $breakpoint == 0 {
      @include flex-temp();
    } @else {
      @include flex-temp(-$indent);
    }
  }
}

$spacer: 1rem;
$spacers: (
  0: 0,
  1: calc($spacer * .25),
  2: calc($spacer * .5),
  3: $spacer,
  4: calc($spacer * 1.5),
  5: calc($spacer * 3),
  6: calc($spacer * 6),
  7: calc($spacer * 12),
  8: calc($spacer * 24),
  9: calc($spacer * 48),
  10: calc($spacer * 96)
);

@mixin mp-temp($infix) {
  @each $length $size in $spacers {
    .m$(infix)-$(size) { margin: $length !important; }
    .mt$(infix)-$(size),
    .my$(infix)-$(size) {
      margin-top: $length !important;
    }
    .mr$(infix)-$(size),
    .mx$(infix)-$(size) {
      margin-right: $length !important;
    }
    .mb$(infix)-$(size),
    .my$(infix)-$(size) {
      margin-bottom: $length !important;
    }
    .ml$(infix)-$(size),
    .mx$(infix)-$(size) {
      margin-left: $length !important;
    }
    .p$(infix)-$(size) { padding: $length !important; }
    .pt$(infix)-$(size),
    .py$(infix)-$(size) {
      padding-top: $length !important;
    }
    .pr$(infix)-$(size),
    .px$(infix)-$(size) {
      padding-right: $length !important;
    }
    .pb$(infix)-$(size),
    .py$(infix)-$(size) {
      padding-bottom: $length !important;
    }
    .pl$(infix)-$(size),
    .px$(infix)-$(size) {
      padding-left: $length !important;
    }
  }

  .m$(infix)-auto { margin: auto !important; }
  .mt$(infix)-auto,
  .my$(infix)-auto {
    margin-top: auto !important;
  }
  .mr$(infix)-auto,
  .mx$(infix)-auto {
    margin-right: auto !important;
  }
  .mb$(infix)-auto,
  .my$(infix)-auto {
    margin-bottom: auto !important;
  }
  .ml$(infix)-auto,
  .mx$(infix)-auto {
    margin-left: auto !important;
  }
}

@each $breakpoint $indent in $grid-breakpoints {
  @include media-breakpoint-up($breakpoint) {
    @if $breakpoint == 0 {
      @include mp-temp();
    } @else {
      @include mp-temp(-$indent);
    }
  }
}

.align-baseline    { vertical-align: baseline !important; }
.align-top         { vertical-align: top !important; }
.align-middle      { vertical-align: middle !important; }
.align-bottom      { vertical-align: bottom !important; }
.align-text-bottom { vertical-align: text-bottom !important; }
.align-text-top    { vertical-align: text-top !important; }

$grid-columns: 12;

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px
);

@mixin make-container {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
}

@mixin make-container-max-widths {
  @each $breakpoint in $container-max-widths {
    @include media-breakpoint-up($breakpoint) {
      max-width: $breakpoint;
    }
  }
}

.container {
  @include make-container();
  @include make-container-max-widths();
}

.container-fluid {
  @include make-container();
}

@mixin make-row {
  display: flex;
  flex-wrap: wrap;
}

@mixin make-col-ready {
  position: relative;
  width: 100%;
  min-height: 1px;
}

@mixin make-col($size) {
  flex: 0 0 calc($size / $grid-columns * 100%);
  max-width: calc($size / $grid-columns * 100%);
}

@mixin make-col-offset($size) {
  $num: $size / $grid-columns;
  margin-left: calc($num * 100%);
}

.row {
  @include make-row();
}

@mixin grid-temp($breakpoint, $infix) {
  @for $i from 1 to $grid-columns {
    .col$(infix)-$(i) {
      @apply --grid-column;
    }
  }

  .col$(infix),
  .col$(infix)-auto {
    @apply --grid-column;
  }

  @include media-breakpoint-up($breakpoint) {
    .col$(infix) {
      flex-basis: 0;
      flex-grow: 1;
      max-width: 100%;
    }

    .col$(infix)-auto {
      flex: 0 0 auto;
      width: auto;
      max-width: none;
    }

    @for $i from 1 to $grid-columns {
      .col$(infix)-$(i) {
        @include make-col($i, $grid-columns);
      }
    }

    .order$(infix)-first { order: -1; }
    .order$(infix)-last { order: $grid-columns + 1; }

    @for $i from 0 to $grid-columns {
      .order$(infix)-$(i) { order: $i; }
    }

    @for $i from 0 to ($grid-columns - 1) {
      @if not ($infix == "" and $i == 0) {
        .offset$(infix)-$(i) {
          @include make-col-offset($i, $grid-columns);
        }
      }
    }
  }
}

@mixin make-grid-columns {
  :root {
    --grid-column: {
      position: relative;
      width: 100%;
      min-height: 1px;
    }
  }

  @each $breakpoint $indent in $grid-breakpoints {
    @if $breakpoint == 0 {
      @include grid-temp($breakpoint, );
    } @else {
      @include grid-temp($breakpoint, -$indent);
    }
  }
}

@include make-grid-columns();